/* 
  Localizable.strings
  SDOSKeyedCodable

  Created by Antonio Jesús Pallares on 13/02/2019.
  Copyright © 2019 SDOS. All rights reserved.
*/

"SDOSKeyedCodableExample.version" = "Versión %@";
"SDOSKeyedCodableExample.alertOkActionTitle" = "OK";
"SDOSKeyedCodableExample.btn.seeExample" = "Ver ejemplo";

"SDOSKeyedCodableExample.type.section.description" = "Descripción";
"SDOSKeyedCodableExample.type.section.json" = "JSON";
"SDOSKeyedCodableExample.type.section.typeToParse" = "Objeto de parseo";
"SDOSKeyedCodableExample.type.section.mapImplementation" = "Propiedades y mapping";
"SDOSKeyedCodableExample.type.section.decodedObject" = "Objeto parseado";

// Bool special case
"SDOSKeyedCodableExample.type.boolSpecialCase.name" = "Bool Special Case";
"SDOSKeyedCodableExample.type.boolSpecialCase.description" = "Permite parsear como bool los valores \"true\", \"false\", \"yes\", \"no\", \"1\", \"0\", 1 ó 0";
"SDOSKeyedCodableExample.type.boolSpecialCase.detailedDescription" = "En los JSON de los servicios web, hay ocasiones en las que un dato de tipo Bool viene dado por un String o por un número. Con esta librería se podrá parsear esos casos \"especiales\" directamente a una propiedad de tipo Bool. Concretamente:\n\nSe podrá parsear a booleano si el valor es uno de los siguientes strings (case insensitive): \"true\", \"false\", \"1\" ó \"0\".\n\nSe podrá parsear a booleano si el valor es el entero 1 ó el entero 0.";

// Flat json
"SDOSKeyedCodableExample.type.flat.name" = "Flat json";
"SDOSKeyedCodableExample.type.flat.description" = "Permite agrupar claves que vienen en la raiz del json dentro de un objeto";
"SDOSKeyedCodableExample.type.flat.detailedDescription" = "En este caso, el json trae en la raiz los campos 'latitude' y 'longitude'.\nQueremos introducir esos dos valores dentro de una propiedad 'location' de tipo Location del objeto de parseo 'ShopDTO', que será la que tenga las propiedades 'latitude' y 'longitude'.";


// All keys
"SDOSKeyedCodableExample.type.allKeys.name" = "All keys";
"SDOSKeyedCodableExample.type.allKeys.description" = "Permite intentar el parseo de un mismo objeto en todas las 'keys' del json";
"SDOSKeyedCodableExample.type.allKeys.detailedDescription" = "En este caso, el json trae varias claves (\"0\", \"1\" y \"2\") en las que vienen objetos de la misma clase. Con la implementación de este ejemplo, se puede parsear fácilmente todos esos objetos en un mismo array sin necesidad de tener 3 propiedades (una para cada clave) en el objeto de parseo.";


// Optional Array Elements
"SDOSKeyedCodableExample.type.optionalArrayElements.name" = "Optional array elements";
"SDOSKeyedCodableExample.type.optionalArrayElements.description" = "Para parsear arrays permitiendo que el parseo de sus elementos pueda fallar";
"SDOSKeyedCodableExample.type.optionalArrayElements.detailedDescription" = "Permite marcar el parseo de los elementos de un array como opcional. De esta forma, si alguno(s) de los elementos del array no puede(n) ser parseado(s), en lugar de lanzar un error de parseo, se obtiene un array con aquellos elementos que sí hayan podido ser parseados\n\nPor defecto se usará \"* \" (asterisco + espacio) en el string de mapeo de la propiedad que contiene el array para indicar que se trata de un array de opcionales en el sentido de que el parseo de algunos elementos puede fallar.";


// KeyOptions
"SDOSKeyedCodableExample.type.keyOptions.name" = "KeyOptions";
"SDOSKeyedCodableExample.type.keyOptions.description" = "Para deshabilitar o modificar las características de mapeo anteriores";
"SDOSKeyedCodableExample.type.keyOptions.detailedDescription" = "KeyedCodable permite configurar las opciones de mapeo avanzadas que proporciona.\n\nSi las claves del json a parsear contuvieran puntos, podemos cambiar el caracter que marcará el separador para el keypath de la ruta a parsear. En este ejemplo, como la clave \".greeting\" contiene un punto, se ha modificado el separador de la ruta al carácter \"+\".\n\nSi un array de elementos opcionales viene en una clave que comienza por \"* \", podemos cambiar el string que denota un array opcional. En el ejemplo, se hace para la propiedad 'array1' con el string \"### \".\n\nTambién se puede cambiar el string que denota un parseo flat (por defecto es el string vacío \"\"). De esta forma podemos parsear el objeto location con los valores que vienen dentro de la clave \"\", en lugar de usar la \"latitud\" y \"longitud\" que vienen en la raiz.\n\nTodo esto se hace con el objeto 'KeyOptions', y pasar 'nil' como alguno de sus argumentos sirve para deshabilitar la funcionalidad. Por ejemplo, pasar 'nil' al argumento 'flat' hace que no se parsee con la funcionalidad flat";

"SDOSKeyedCodableExample.type.arrayMapping.name" = "Array mapping";
"SDOSKeyedCodableExample.type.arrayMapping.description" = "Permite realizar un \"compactMap\" de un array de objetos";
"SDOSKeyedCodableExample.type.arrayMapping.detailedDescription" = "Esta característica permite parsear una serie de valores que están contenidos dentro de diferentes niveles de arrays. Por ejemplo, si tuvieramos un array de ciudades y cada ciudad tiene un array de ciudadanos esta característica nos permitiría parsear en un solo array todos los nombres de todos los ciudadanos del pais.";
